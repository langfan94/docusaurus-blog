"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4168],{3905:function(n,r,e){e.d(r,{Zo:function(){return u},kt:function(){return p}});var t=e(7294);function i(n,r,e){return r in n?Object.defineProperty(n,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[r]=e,n}function o(n,r){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),e.push.apply(e,t)}return e}function a(n){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?o(Object(e),!0).forEach((function(r){i(n,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(e,r))}))}return n}function l(n,r){if(null==n)return{};var e,t,i=function(n,r){if(null==n)return{};var e,t,i={},o=Object.keys(n);for(t=0;t<o.length;t++)e=o[t],r.indexOf(e)>=0||(i[e]=n[e]);return i}(n,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)e=o[t],r.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var f=t.createContext({}),s=function(n){var r=t.useContext(f),e=r;return n&&(e="function"==typeof n?n(r):a(a({},r),n)),e},u=function(n){var r=s(n.components);return t.createElement(f.Provider,{value:r},n.children)},c={inlineCode:"code",wrapper:function(n){var r=n.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(n,r){var e=n.components,i=n.mdxType,o=n.originalType,f=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),m=s(e),p=i,g=m["".concat(f,".").concat(p)]||m[p]||c[p]||o;return e?t.createElement(g,a(a({ref:r},u),{},{components:e})):t.createElement(g,a({ref:r},u))}));function p(n,r){var e=arguments,i=r&&r.mdxType;if("string"==typeof n||i){var o=e.length,a=new Array(o);a[0]=m;var l={};for(var f in r)hasOwnProperty.call(r,f)&&(l[f]=r[f]);l.originalType=n,l.mdxType="string"==typeof n?n:i,a[1]=l;for(var s=2;s<o;s++)a[s]=e[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,e)}m.displayName="MDXCreateElement"},629:function(n,r,e){e.r(r),e.d(r,{assets:function(){return u},contentTitle:function(){return f},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var t=e(7462),i=e(3366),o=(e(7294),e(3905)),a=["components"],l={title:"TimSort",date:new Date("2021-12-22T16:01:00.000Z"),tags:[]},f="TimSort",s={permalink:"/TimSort",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/TimSort.md",source:"@site/blog/TimSort.md",title:"TimSort",description:"\u662f\u4e00\u79cd\u6df7\u5408\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u6e90\u81ea\u5408\u5e76\u6392\u5e8f\u548c\u63d2\u5165\u6392\u5e8f\uff0c\u65e8\u5728\u8f83\u597d\u5730\u5904\u7406\u771f\u5b9e\u4e16\u754c\u4e2d\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u3002",date:"2021-12-22T16:01:00.000Z",formattedDate:"December 22, 2021",tags:[],readingTime:2.82,truncated:!1,authors:[],frontMatter:{title:"TimSort",date:"2021-12-22T16:01:00.000Z",tags:[]},prevItem:{title:"npmTest",permalink:"/npmTest"},nextItem:{title:"Merge-Sort",permalink:"/Merge-Sort"}},u={authorsImageUrls:[]},c=[{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",level:2},{value:"\u65f6\u95f4\u590d\u6742\u5ea6",id:"\u65f6\u95f4\u590d\u6742\u5ea6",level:2},{value:"\u7a7a\u95f4\u590d\u6742\u5ea6",id:"\u7a7a\u95f4\u590d\u6742\u5ea6",level:2}],m={toc:c};function p(n){var r=n.components,e=(0,i.Z)(n,a);return(0,o.kt)("wrapper",(0,t.Z)({},m,e,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u662f\u4e00\u79cd\u6df7\u5408\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u6e90\u81ea\u5408\u5e76\u6392\u5e8f\u548c\u63d2\u5165\u6392\u5e8f\uff0c\u65e8\u5728\u8f83\u597d\u5730\u5904\u7406\u771f\u5b9e\u4e16\u754c\u4e2d\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u3002")),(0,o.kt)("h2",{id:"\u5b9e\u73b0"},"\u5b9e\u73b0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},'// C++ program to perform TimSort.\n#include<bits/stdc++.h>\nusing namespace std;\nconst int RUN = 32;\n\n// This function sorts array from left index to\n// to right index which is of size atmost RUN\nvoid insertionSort(int arr[], int left, int right)\n{\n    for (int i = left + 1; i <= right; i++)\n    {\n        int temp = arr[i];\n        int j = i - 1;\n        while (j >= left && arr[j] > temp)\n        {\n            arr[j+1] = arr[j];\n            j--;\n        }\n        arr[j+1] = temp;\n    }\n}\n\n// Merge function merges the sorted runs\nvoid merge(int arr[], int l, int m, int r)\n{\n    \n    // Original array is broken in two parts\n    // left and right array\n    int len1 = m - l + 1, len2 = r - m;\n    int left[len1], right[len2];\n    for (int i = 0; i < len1; i++)\n        left[i] = arr[l + i];\n    for (int i = 0; i < len2; i++)\n        right[i] = arr[m + 1 + i];\n\n    int i = 0;\n    int j = 0;\n    int k = l;\n\n    // After comparing, we\n    // merge those two array\n    // in larger sub array\n    while (i < len1 && j < len2)\n    {\n        if (left[i] <= right[j])\n        {\n            arr[k] = left[i];\n            i++;\n        }\n        else\n        {\n            arr[k] = right[j];\n            j++;\n        }\n        k++;\n    }\n\n    // Copy remaining elements of left, if any\n    while (i < len1)\n    {\n        arr[k] = left[i];\n        k++;\n        i++;\n    }\n\n    // Copy remaining element of right, if any\n    while (j < len2)\n    {\n        arr[k] = right[j];\n        k++;\n        j++;\n    }\n}\n\n// Iterative Timsort function to sort the\n// array[0...n-1] (similar to merge sort)\nvoid timSort(int arr[], int n)\n{\n    \n    // Sort individual subarrays of size RUN\n    for (int i = 0; i < n; i+=RUN) insertionSort(arr, i, min((i+RUN-1), (n-1)));\n\n    // Start merging from size RUN (or 32).\n    // It will merge\n    // to form size 64, then 128, 256\n    // and so on ....\n    for (int size = RUN; size < n; size = 2*size)\n    {\n        \n        // pick starting point of\n        // left sub array. We\n        // are going to merge\n        // arr[left..left+size-1]\n        // and arr[left+size, left+2*size-1]\n        // After every merge, we\n        // increase left by 2*size\n        for (int left = 0; left < n;\n                            left += 2*size)\n        {\n            \n            // find ending point of\n            // left sub array\n            // mid+1 is starting point\n            // of right sub array\n            int mid = left + size - 1;\n            int right = min((left + 2*size - 1),\n                                            (n-1));\n\n            // merge sub array arr[left.....mid] &\n            // arr[mid+1....right]\n            if(mid < right)\n                merge(arr, left, mid, right);\n        }\n    }\n}\n\n// Utility function to print the Array\nvoid printArray(int arr[], int n)\n{\n    for (int i = 0; i < n; i++)\n        printf("%d ", arr[i]);\n    printf("\\n");\n}\n\n// Driver program to test above function\nint main()\n{\n    int arr[] = {-2, 7, 15, -14, 0, 15, 0, 7, -7,\n                    -4, -13, 5, 8, -14, 12};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    printf("Given Array is\\n");\n    printArray(arr, n);\n\n    // Function Call\n    timSort(arr, n);\n\n    printf("After Sorting Array is\\n");\n    printArray(arr, n);\n    return 0;\n}\n')),(0,o.kt)("h2",{id:"\u65f6\u95f4\u590d\u6742\u5ea6"},"\u65f6\u95f4\u590d\u6742\u5ea6"),(0,o.kt)("p",null,"  $O(n)=O(n\\log_2{n})$"),(0,o.kt)("h2",{id:"\u7a7a\u95f4\u590d\u6742\u5ea6"},"\u7a7a\u95f4\u590d\u6742\u5ea6"),(0,o.kt)("p",null,"  $O(n)$"))}p.isMDXComponent=!0}}]);